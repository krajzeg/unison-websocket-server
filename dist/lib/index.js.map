{"version":3,"sources":["index.js"],"names":[],"mappings":"uwBAAA,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1B,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;;AAEb,qBAAqB;AAC7B,WADQ,qBAAqB,CAC5B,QAAQ,EAAE,wCADH,qBAAqB;AAEtC,KAAC,CAAC,MAAM,CAAC,IAAI,EAAE;AACb,YAAM,EAAE,QAAQ;AAChB,aAAO,EAAE,EAAE;AACX,aAAO,EAAE,CAAC,EACX,CAAC,CAAC;;;AAEH,QAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvB,QAAI,CAAC,OAAO,GAAG,EAAE,CAAC;AAClB,QAAI,CAAC,SAAS,GAAG,EAAE,CAAC;;AAEpB,QAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,UAAC,YAAY,UAAK,MAAK,MAAM,CAAC,YAAY,CAAC,EAAA,CAAC,CAAC,CAC3E,aAbkB,qBAAqB;;;AAelC,oBAAC,YAAY,EAAE;AACnB,UAAI,QAAQ,GAAG,SAAS,GAAI,IAAI,CAAC,OAAO,EAAE,AAAC,CAAC;AAC5C,kBAAY,CAAC,SAAS,GAAG,QAAQ,CAAC;;AAElC,aAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;AACnC,UAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;;AAEtC,kBAAY,CAAC,EAAE,CAAC,OAAO,EAAE,oBAAM,OAAK,MAAM,CAAC,QAAQ,CAAC,EAAA,CAAC,CAAC;AACtD,kBAAY,CAAC,EAAE,CAAC,SAAS,EAAE,UAAC,GAAG,UAAK,OAAK,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,EAAA,CAAC,CAAC;;AAEjE,UAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,CAAC,CACrC;;;AAEK,oBAAC,QAAQ,EAAE;AACf,UAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC,CAAC;AACpC,aAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAC/B;;;AAEM,qBAAC,QAAQ,EAAE,GAAG,EAAE;AACrB,UAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAC3C;;;AAEK,oBAAC,QAAQ,EAAE,SAAS,EAAE;AAC1B,UAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACpC,UAAI,CAAC,MAAM;AACT,aAAO;;AAET,aAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CACpD;;;AAEO,sBAAC,IAAI,EAAE;AACb,aAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAK,YAAM,EAAE,AAAC,CAAC,CAC3C;;;AAEO,sBAAC,QAAQ,EAAE,CAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAE;AAClD,sBAAC,QAAQ,EAAE,CAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAE;AACjD,uBAAC,QAAQ,EAAE,CAAE,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAE,YAnDzC,qBAAqB,2BAArB,qBAAqB","file":"index.js","sourcesContent":["var _ = require('lodash');\r\nvar Promise = require('bluebird');\r\n\r\nexport default class UnisonWebsocketServer {\r\n  constructor(wsServer) {\r\n    _.extend(this, {\r\n      server: wsServer,\r\n      clients: {},\r\n      _nextId: 1\r\n    });\r\n\r\n    this.server = wsServer;\r\n    this.clients = {};\r\n    this.callbacks = {};\r\n\r\n    this.server.on('connection', (clientSocket) => this.attach(clientSocket));\r\n  }\r\n\r\n  attach(clientSocket) {\r\n    let clientId = 'client#' + (this._nextId++);\r\n    clientSocket._clientId = clientId;\r\n\r\n    Promise.promisifyAll(clientSocket);\r\n    this.clients[clientId] = clientSocket;\r\n\r\n    clientSocket.on('close', () => this.detach(clientId));\r\n    clientSocket.on('message', (msg) => this.receive(clientId, msg));\r\n\r\n    this.callback('onAttach')(clientId);\r\n  }\r\n\r\n  detach(clientId) {\r\n    this.callback('onDetach')(clientId);\r\n    delete this.clients[clientId];\r\n  }\r\n\r\n  receive(clientId, msg) {\r\n    this.callback('onReceive')(clientId, msg);\r\n  }\r\n\r\n  sendTo(clientId, msgString) {\r\n    let client = this.clients[clientId];\r\n    if (!client)\r\n      return;\r\n\r\n    return this.clients[clientId].sendAsync(msgString);\r\n  }\r\n\r\n  callback(name) {\r\n    return this.callbacks[name] || (() => {});\r\n  }\r\n\r\n  onAttach(callback) { this.callbacks.onAttach = callback; }\r\n  onDetach(callback) { this.callbacks.onDetach = callback; }\r\n  onReceive(callback) { this.callbacks.onReceive = callback; }\r\n}\r\n"],"sourceRoot":"..\\..\\lib"}